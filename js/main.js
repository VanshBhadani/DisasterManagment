/**
 * Suraksha Learn - Main JavaScript
 * Handles navigation, internationalization, and core site functionality
 */

// Global application state
const SurakshaLearn = {
  // Current language
  currentLang: 'en',
  
  // Available languages
  languages: {
    en: 'English',
    hi: '‡§π‡§ø‡§Ç‡§¶‡•Ä'
  },
  
  // Translation data
  translations: {
    en: {
      // Navigation
      'nav.home': 'Home',
      'nav.lessons': 'Lessons',
      'nav.simulate': 'Simulate',
      'nav.quiz': 'Quiz',
      'nav.dashboard': 'Dashboard',
      'nav.skip': 'Skip to main content',
      
      // Site info
      'site.name': 'Suraksha Learn',
      'site.title': 'Suraksha Learn - Disaster Preparedness for Schools',
      
      // Hero section
      'hero.title': 'Be Prepared.<br><span class="hero__title--accent">Stay Safe.</span>',
      'hero.subtitle': 'Interactive disaster preparedness training for schools and colleges. Learn life-saving skills through immersive simulations and expert guidance.',
      'hero.cta': 'Start Learning',
      'hero.demo': 'Watch Demo',
      'hero.stat1': 'Students Trained',
      'hero.stat2': 'Schools',
      'hero.stat3': 'Pass Rate',
      'hero.scroll': 'Scroll to explore',
      
      // Features section
      'features.title': 'Why Choose Suraksha Learn?',
      'features.subtitle': 'Our platform combines cutting-edge technology with proven safety protocols',
      'features.interactive.title': 'Interactive Simulations',
      'features.interactive.text': 'Practice real-world scenarios in a safe, controlled environment with immediate feedback.',
      'features.expert.title': 'Expert Content',
      'features.expert.text': 'Content developed by disaster management experts and educational specialists.',
      'features.certificate.title': 'Certification',
      'features.certificate.text': 'Earn recognized certificates upon successful completion of training modules.',
      'features.offline.title': 'Offline Access',
      'features.offline.text': 'Download lessons and materials for offline learning and reference.',
      
      // Modules section
      'modules.title': 'Training Modules',
      'modules.subtitle': 'Comprehensive preparedness training for all major disasters',
      'modules.earthquake.title': 'Earthquake Safety',
      'modules.earthquake.text': 'Learn Drop, Cover, and Hold techniques. Practice evacuation procedures.',
      'modules.fire.title': 'Fire Safety',
      'modules.fire.text': 'Fire prevention, evacuation routes, and proper use of safety equipment.',
      'modules.flood.title': 'Flood Preparedness',
      'modules.flood.text': 'Emergency kits, safe evacuation, and post-flood safety measures.',
      'modules.start': 'Start Module',
      
      // CTA section
      'cta.title': 'Ready to Get Started?',
      'cta.text': 'Join thousands of students already learning life-saving skills',
      'cta.primary': 'Start Your First Lesson',
      'cta.secondary': 'View Progress Dashboard',
      
      // Footer
      'footer.tagline': 'Empowering communities through disaster preparedness education',
      'footer.platform': 'Platform',
      'footer.resources': 'Resources',
      'footer.guides': 'Safety Guides',
      'footer.downloads': 'Downloads',
      'footer.help': 'Help Center',
      'footer.contact': 'Contact Us',
      'footer.copyright': '¬© 2025 Suraksha Learn. All rights reserved.',
      'footer.privacy': 'Privacy Policy',
      'footer.terms': 'Terms of Service'
    },
    
    hi: {
      // Navigation
      'nav.home': '‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§™‡•É‡§∑‡•ç‡§†',
      'nav.lessons': '‡§™‡§æ‡§†',
      'nav.simulate': '‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏',
      'nav.quiz': '‡§™‡•ç‡§∞‡§∂‡•ç‡§®‡•ã‡§§‡•ç‡§§‡§∞‡•Ä',
      'nav.dashboard': '‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§°',
      'nav.skip': '‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§∏‡§æ‡§Æ‡§ó‡•ç‡§∞‡•Ä ‡§™‡§∞ ‡§ú‡§æ‡§è‡§Ç',
      
      // Site info
      'site.name': '‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§≤‡§∞‡•ç‡§®',
      'site.title': '‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§≤‡§∞‡•ç‡§® - ‡§∏‡•ç‡§ï‡•Ç‡§≤‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§™‡§¶‡§æ ‡§§‡•à‡§Ø‡§æ‡§∞‡•Ä',
      
      // Hero section
      'hero.title': '‡§§‡•à‡§Ø‡§æ‡§∞ ‡§∞‡§π‡•á‡§Ç‡•§<br><span class="hero__title--accent">‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§∞‡§π‡•á‡§Ç‡•§</span>',
      'hero.subtitle': '‡§∏‡•ç‡§ï‡•Ç‡§≤‡•ã‡§Ç ‡§î‡§∞ ‡§ï‡•â‡§≤‡•á‡§ú‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§á‡§Ç‡§ü‡§∞‡•à‡§ï‡•ç‡§ü‡§ø‡§µ ‡§Ü‡§™‡§¶‡§æ ‡§§‡•à‡§Ø‡§æ‡§∞‡•Ä ‡§™‡•ç‡§∞‡§∂‡§ø‡§ï‡•ç‡§∑‡§£‡•§ ‡§á‡§Æ‡§∞‡•ç‡§∏‡§ø‡§µ ‡§∏‡§ø‡§Æ‡•Å‡§≤‡•á‡§∂‡§® ‡§î‡§∞ ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§® ‡§ï‡•á ‡§Æ‡§æ‡§ß‡•ç‡§Ø‡§Æ ‡§∏‡•á ‡§ú‡•Ä‡§µ‡§® ‡§¨‡§ö‡§æ‡§®‡•á ‡§µ‡§æ‡§≤‡•á ‡§ï‡•å‡§∂‡§≤ ‡§∏‡•Ä‡§ñ‡•á‡§Ç‡•§',
      'hero.cta': '‡§∏‡•Ä‡§ñ‡§®‡§æ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç',
      'hero.demo': '‡§°‡•á‡§Æ‡•ã ‡§¶‡•á‡§ñ‡•á‡§Ç',
      'hero.stat1': '‡§™‡•ç‡§∞‡§∂‡§ø‡§ï‡•ç‡§∑‡§ø‡§§ ‡§õ‡§æ‡§§‡•ç‡§∞',
      'hero.stat2': '‡§∏‡•ç‡§ï‡•Ç‡§≤',
      'hero.stat3': '‡§â‡§§‡•ç‡§§‡•Ä‡§∞‡•ç‡§£ ‡§¶‡§∞',
      'hero.scroll': '‡§ñ‡•ã‡§ú‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•ç‡§ï‡•ç‡§∞‡•â‡§≤ ‡§ï‡§∞‡•á‡§Ç',
      
      // Features section
      'features.title': '‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§≤‡§∞‡•ç‡§® ‡§ï‡•ç‡§Ø‡•ã‡§Ç ‡§ö‡•Å‡§®‡•á‡§Ç?',
      'features.subtitle': '‡§π‡§Æ‡§æ‡§∞‡§æ ‡§™‡•ç‡§≤‡•á‡§ü‡§´‡•â‡§∞‡•ç‡§Æ ‡§Ö‡§§‡•ç‡§Ø‡§æ‡§ß‡•Å‡§®‡§ø‡§ï ‡§§‡§ï‡§®‡•Ä‡§ï ‡§ï‡•ã ‡§∏‡§ø‡§¶‡•ç‡§ß ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§™‡•ç‡§∞‡•ã‡§ü‡•ã‡§ï‡•â‡§≤ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§ú‡•ã‡§°‡§º‡§§‡§æ ‡§π‡•à',
      'features.interactive.title': '‡§á‡§Ç‡§ü‡§∞‡•à‡§ï‡•ç‡§ü‡§ø‡§µ ‡§∏‡§ø‡§Æ‡•Å‡§≤‡•á‡§∂‡§®',
      'features.interactive.text': '‡§§‡§§‡•ç‡§ï‡§æ‡§≤ ‡§´‡•Ä‡§°‡§¨‡•à‡§ï ‡§ï‡•á ‡§∏‡§æ‡§• ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§, ‡§®‡§ø‡§Ø‡§Ç‡§§‡•ç‡§∞‡§ø‡§§ ‡§µ‡§æ‡§§‡§æ‡§µ‡§∞‡§£ ‡§Æ‡•á‡§Ç ‡§µ‡§æ‡§∏‡•ç‡§§‡§µ‡§ø‡§ï ‡§™‡§∞‡§ø‡§∏‡•ç‡§•‡§ø‡§§‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡§æ ‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§',
      'features.expert.title': '‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û ‡§∏‡§æ‡§Æ‡§ó‡•ç‡§∞‡•Ä',
      'features.expert.text': '‡§Ü‡§™‡§¶‡§æ ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§® ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û‡•ã‡§Ç ‡§î‡§∞ ‡§∂‡•à‡§ï‡•ç‡§∑‡§ø‡§ï ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û‡•ã‡§Ç ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ ‡§µ‡§ø‡§ï‡§∏‡§ø‡§§ ‡§∏‡§æ‡§Æ‡§ó‡•ç‡§∞‡•Ä‡•§',
      'features.certificate.title': '‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§®',
      'features.certificate.text': '‡§™‡•ç‡§∞‡§∂‡§ø‡§ï‡•ç‡§∑‡§£ ‡§Æ‡•â‡§°‡•ç‡§Ø‡•Ç‡§≤ ‡§ï‡•á ‡§∏‡§´‡§≤ ‡§™‡•Ç‡§∞‡§æ ‡§π‡•ã‡§®‡•á ‡§™‡§∞ ‡§Æ‡§æ‡§®‡•ç‡§Ø‡§§‡§æ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§™‡§§‡•ç‡§∞ ‡§Ö‡§∞‡•ç‡§ú‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç‡•§',
      'features.offline.title': '‡§ë‡§´‡§º‡§≤‡§æ‡§á‡§® ‡§™‡§π‡•Å‡§Ç‡§ö',
      'features.offline.text': '‡§ë‡§´‡§º‡§≤‡§æ‡§á‡§® ‡§∏‡•Ä‡§ñ‡§®‡•á ‡§î‡§∞ ‡§∏‡§Ç‡§¶‡§∞‡•ç‡§≠ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§™‡§æ‡§† ‡§î‡§∞ ‡§∏‡§æ‡§Æ‡§ó‡•ç‡§∞‡•Ä ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç‡•§',
      
      // Modules section
      'modules.title': '‡§™‡•ç‡§∞‡§∂‡§ø‡§ï‡•ç‡§∑‡§£ ‡§Æ‡•â‡§°‡•ç‡§Ø‡•Ç‡§≤',
      'modules.subtitle': '‡§∏‡§≠‡•Ä ‡§™‡•ç‡§∞‡§Æ‡•Å‡§ñ ‡§Ü‡§™‡§¶‡§æ‡§ì‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§µ‡•ç‡§Ø‡§æ‡§™‡§ï ‡§§‡•à‡§Ø‡§æ‡§∞‡•Ä ‡§™‡•ç‡§∞‡§∂‡§ø‡§ï‡•ç‡§∑‡§£',
      'modules.earthquake.title': '‡§≠‡•Ç‡§ï‡§Ç‡§™ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ',
      'modules.earthquake.text': '‡§°‡•ç‡§∞‡•â‡§™, ‡§ï‡§µ‡§∞, ‡§î‡§∞ ‡§π‡•ã‡§≤‡•ç‡§° ‡§§‡§ï‡§®‡•Ä‡§ï ‡§∏‡•Ä‡§ñ‡•á‡§Ç‡•§ ‡§®‡§ø‡§ï‡§æ‡§∏‡•Ä ‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ‡§ì‡§Ç ‡§ï‡§æ ‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§',
      'modules.fire.title': '‡§Ö‡§ó‡•ç‡§®‡§ø ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ',
      'modules.fire.text': '‡§Ö‡§ó‡•ç‡§®‡§ø ‡§∞‡•ã‡§ï‡§•‡§æ‡§Æ, ‡§®‡§ø‡§ï‡§æ‡§∏‡•Ä ‡§Æ‡§æ‡§∞‡•ç‡§ó, ‡§î‡§∞ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§â‡§™‡§ï‡§∞‡§£ ‡§ï‡§æ ‡§â‡§ö‡§ø‡§§ ‡§â‡§™‡§Ø‡•ã‡§ó‡•§',
      'modules.flood.title': '‡§¨‡§æ‡§¢‡§º ‡§ï‡•Ä ‡§§‡•à‡§Ø‡§æ‡§∞‡•Ä',
      'modules.flood.text': '‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤‡•Ä‡§® ‡§ï‡§ø‡§ü, ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§®‡§ø‡§ï‡§æ‡§∏‡•Ä, ‡§î‡§∞ ‡§¨‡§æ‡§¢‡§º ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§â‡§™‡§æ‡§Ø‡•§',
      'modules.start': '‡§Æ‡•â‡§°‡•ç‡§Ø‡•Ç‡§≤ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç',
      
      // CTA section
      'cta.title': '‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§π‡•à‡§Ç?',
      'cta.text': '‡§π‡§ú‡§æ‡§∞‡•ã‡§Ç ‡§õ‡§æ‡§§‡•ç‡§∞ ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§π‡•Ä ‡§ú‡•Ä‡§µ‡§® ‡§¨‡§ö‡§æ‡§®‡•á ‡§µ‡§æ‡§≤‡•á ‡§ï‡•å‡§∂‡§≤ ‡§∏‡•Ä‡§ñ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç',
      'cta.primary': '‡§Ö‡§™‡§®‡§æ ‡§™‡§π‡§≤‡§æ ‡§™‡§æ‡§† ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç',
      'cta.secondary': '‡§™‡•ç‡§∞‡§ó‡§§‡§ø ‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§° ‡§¶‡•á‡§ñ‡•á‡§Ç',
      
      // Footer
      'footer.tagline': '‡§Ü‡§™‡§¶‡§æ ‡§§‡•à‡§Ø‡§æ‡§∞‡•Ä ‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ ‡§ï‡•á ‡§Æ‡§æ‡§ß‡•ç‡§Ø‡§Æ ‡§∏‡•á ‡§∏‡§Æ‡•Å‡§¶‡§æ‡§Ø‡•ã‡§Ç ‡§ï‡•ã ‡§∏‡§∂‡§ï‡•ç‡§§ ‡§¨‡§®‡§æ‡§®‡§æ',
      'footer.platform': '‡§™‡•ç‡§≤‡•á‡§ü‡§´‡•â‡§∞‡•ç‡§Æ',
      'footer.resources': '‡§∏‡§Ç‡§∏‡§æ‡§ß‡§®',
      'footer.guides': '‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§ó‡§æ‡§á‡§°',
      'footer.downloads': '‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§°',
      'footer.help': '‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡•á‡§Ç‡§¶‡•ç‡§∞',
      'footer.contact': '‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡•á‡§Ç',
      'footer.copyright': '¬© 2025 ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§≤‡§∞‡•ç‡§®‡•§ ‡§∏‡§≠‡•Ä ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§∞ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§‡•§',
      'footer.privacy': '‡§ó‡•ã‡§™‡§®‡•Ä‡§Ø‡§§‡§æ ‡§®‡•Ä‡§§‡§ø',
      'footer.terms': '‡§∏‡•á‡§µ‡§æ ‡§ï‡•Ä ‡§∂‡§∞‡•ç‡§§‡•á‡§Ç'
    }
  }
};

/**
 * Initialize the application
 */
function init() {
  console.log('üöÄ Suraksha Learn initialized');
  
  // Load saved language preference
  const savedLang = localStorage.getItem('suraksha-lang') || 'en';
  SurakshaLearn.currentLang = savedLang;
  
  // Initialize all components
  initNavigation();
  initLanguageToggle();
  initSmoothScrolling();
  initLazyLoading();
  initAccessibility();
  initAnimations();
  
  // Apply current language
  applyTranslations();
  
  // Update language toggle display
  updateLanguageToggle();
  
  console.log(`‚úÖ Language set to: ${SurakshaLearn.currentLang}`);
}

/**
 * Initialize navigation functionality
 */
function initNavigation() {
  const nav = document.querySelector('.nav');
  const mobileToggle = document.querySelector('.nav__mobile-toggle');
  const navMenu = document.querySelector('.nav__menu');
  
  // Handle mobile navigation toggle
  if (mobileToggle && navMenu) {
    mobileToggle.addEventListener('click', () => {
      const isOpen = navMenu.classList.contains('nav__menu--open');
      
      if (isOpen) {
        navMenu.classList.remove('nav__menu--open');
        mobileToggle.classList.remove('nav__mobile-toggle--active');
        document.body.classList.remove('nav-open');
      } else {
        navMenu.classList.add('nav__menu--open');
        mobileToggle.classList.add('nav__mobile-toggle--active');
        document.body.classList.add('nav-open');
      }
    });
    
    // Close mobile nav when clicking outside
    document.addEventListener('click', (e) => {
      if (!nav.contains(e.target) && navMenu.classList.contains('nav__menu--open')) {
        navMenu.classList.remove('nav__menu--open');
        mobileToggle.classList.remove('nav__mobile-toggle--active');
        document.body.classList.remove('nav-open');
      }
    });
    
    // Close mobile nav on escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && navMenu.classList.contains('nav__menu--open')) {
        navMenu.classList.remove('nav__menu--open');
        mobileToggle.classList.remove('nav__mobile-toggle--active');
        document.body.classList.remove('nav-open');
      }
    });
  }
  
  // Handle scroll-based nav styling
  let lastScroll = 0;
  window.addEventListener('scroll', () => {
    const currentScroll = window.pageYOffset;
    
    if (currentScroll > 100) {
      nav.classList.add('nav--scrolled');
    } else {
      nav.classList.remove('nav--scrolled');
    }
    
    // Hide nav on scroll down, show on scroll up
    if (currentScroll > lastScroll && currentScroll > 200) {
      nav.classList.add('nav--hidden');
    } else {
      nav.classList.remove('nav--hidden');
    }
    
    lastScroll = currentScroll;
  });
}

/**
 * Initialize language toggle functionality
 */
function initLanguageToggle() {
  const langToggle = document.querySelector('.lang-toggle');
  
  if (langToggle) {
    langToggle.addEventListener('click', () => {
      // Toggle between languages
      SurakshaLearn.currentLang = SurakshaLearn.currentLang === 'en' ? 'hi' : 'en';
      
      // Save preference
      localStorage.setItem('suraksha-lang', SurakshaLearn.currentLang);
      
      // Apply translations
      applyTranslations();
      
      // Update toggle display
      updateLanguageToggle();
      
      // Announce change to screen readers
      announceToScreenReader(`Language changed to ${SurakshaLearn.languages[SurakshaLearn.currentLang]}`);
      
      console.log(`üåê Language switched to: ${SurakshaLearn.currentLang}`);
    });
  }
}

/**
 * Update language toggle button text
 */
function updateLanguageToggle() {
  const langToggleText = document.querySelector('.lang-toggle__text');
  
  if (langToggleText) {
    langToggleText.textContent = SurakshaLearn.currentLang.toUpperCase();
  }
}

/**
 * Apply translations to all elements with data-i18n attribute
 */
function applyTranslations() {
  const elements = document.querySelectorAll('[data-i18n]');
  const currentTranslations = SurakshaLearn.translations[SurakshaLearn.currentLang];
  
  elements.forEach(element => {
    const key = element.getAttribute('data-i18n');
    const translation = currentTranslations[key];
    
    if (translation) {
      // Handle HTML content vs text content
      if (translation.includes('<')) {
        element.innerHTML = translation;
      } else {
        element.textContent = translation;
      }
    }
  });
  
  // Handle placeholder text
  const placeholderElements = document.querySelectorAll('[data-i18n-placeholder]');
  placeholderElements.forEach(element => {
    const key = element.getAttribute('data-i18n-placeholder');
    const translation = currentTranslations[key];
    
    if (translation) {
      element.placeholder = translation;
    }
  });
  
  // Update document title
  const titleElement = document.querySelector('title[data-i18n]');
  if (titleElement) {
    const key = titleElement.getAttribute('data-i18n');
    const translation = currentTranslations[key];
    if (translation) {
      document.title = translation;
    }
  }
  
  // Update HTML lang attribute
  document.documentElement.lang = SurakshaLearn.currentLang;
}

/**
 * Initialize smooth scrolling for anchor links
 */
function initSmoothScrolling() {
  const smoothScrollLinks = document.querySelectorAll('a[href^="#"]');
  
  smoothScrollLinks.forEach(link => {
    link.addEventListener('click', (e) => {
      const targetId = link.getAttribute('href').substring(1);
      const targetElement = document.getElementById(targetId);
      
      if (targetElement) {
        e.preventDefault();
        
        const headerOffset = 80; // Account for fixed header
        const elementPosition = targetElement.getBoundingClientRect().top;
        const offsetPosition = elementPosition + window.pageYOffset - headerOffset;
        
        window.scrollTo({
          top: offsetPosition,
          behavior: 'smooth'
        });
        
        // Update focus for accessibility
        targetElement.focus({ preventScroll: true });
      }
    });
  });
}

/**
 * Initialize lazy loading for images
 */
function initLazyLoading() {
  // Only initialize if IntersectionObserver is supported
  if ('IntersectionObserver' in window) {
    const imageObserver = new IntersectionObserver((entries, observer) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const img = entry.target;
          img.src = img.dataset.src;
          img.classList.remove('lazy');
          imageObserver.unobserve(img);
        }
      });
    });
    
    const lazyImages = document.querySelectorAll('img[data-src]');
    lazyImages.forEach(img => {
      img.classList.add('lazy');
      imageObserver.observe(img);
    });
  } else {
    // Fallback for browsers without IntersectionObserver
    const lazyImages = document.querySelectorAll('img[data-src]');
    lazyImages.forEach(img => {
      img.src = img.dataset.src;
    });
  }
}

/**
 * Initialize accessibility enhancements
 */
function initAccessibility() {
  // Add keyboard navigation for custom interactive elements
  const interactiveElements = document.querySelectorAll('[role="button"], .btn, .nav__link');
  
  interactiveElements.forEach(element => {
    element.addEventListener('keydown', (e) => {
      if (e.key === 'Enter' || e.key === ' ') {
        e.preventDefault();
        element.click();
      }
    });
  });
  
  // Improve focus management for modals and overlays
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Tab') {
      trapFocusInModal(e);
    }
  });
  
  // Add skip link functionality
  const skipLink = document.querySelector('.skip-link');
  if (skipLink) {
    skipLink.addEventListener('click', (e) => {
      e.preventDefault();
      const mainContent = document.getElementById('main');
      if (mainContent) {
        mainContent.focus();
        mainContent.scrollIntoView();
      }
    });
  }
}

/**
 * Trap focus within modals for accessibility
 */
function trapFocusInModal(e) {
  const activeModal = document.querySelector('.modal:not([hidden]), .simulation-overlay:not([hidden])');
  
  if (activeModal) {
    const focusableElements = activeModal.querySelectorAll(
      'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
    );
    
    const firstElement = focusableElements[0];
    const lastElement = focusableElements[focusableElements.length - 1];
    
    if (e.shiftKey) {
      if (document.activeElement === firstElement) {
        lastElement.focus();
        e.preventDefault();
      }
    } else {
      if (document.activeElement === lastElement) {
        firstElement.focus();
        e.preventDefault();
      }
    }
  }
}

/**
 * Initialize GSAP animations if available
 */
function initAnimations() {
  if (typeof gsap !== 'undefined') {
    // Fade in elements on scroll
    gsap.registerPlugin(ScrollTrigger);
    
    // Animate feature cards
    gsap.from('.feature-card', {
      scrollTrigger: {
        trigger: '.features',
        start: 'top 80%'
      },
      y: 50,
      opacity: 0,
      duration: 0.8,
      stagger: 0.2,
      ease: 'power2.out'
    });
    
    // Animate module cards
    gsap.from('.module-card', {
      scrollTrigger: {
        trigger: '.modules',
        start: 'top 80%'
      },
      y: 50,
      opacity: 0,
      duration: 0.8,
      stagger: 0.2,
      ease: 'power2.out'
    });
    
    // Animate stats
    gsap.from('.stat', {
      scrollTrigger: {
        trigger: '.hero__stats',
        start: 'top 80%'
      },
      scale: 0.8,
      opacity: 0,
      duration: 0.6,
      stagger: 0.1,
      ease: 'back.out(1.7)'
    });
  }
}

/**
 * Announce text to screen readers
 */
function announceToScreenReader(message) {
  const announcement = document.createElement('div');
  announcement.setAttribute('aria-live', 'polite');
  announcement.setAttribute('aria-atomic', 'true');
  announcement.className = 'sr-only';
  announcement.textContent = message;
  
  document.body.appendChild(announcement);
  
  // Remove after announcement
  setTimeout(() => {
    document.body.removeChild(announcement);
  }, 1000);
}

/**
 * Utility function to format time
 */
function formatTime(seconds) {
  const minutes = Math.floor(seconds / 60);
  const remainingSeconds = Math.floor(seconds % 60);
  return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
}

/**
 * Utility function to format date
 */
function formatDate(date, locale = 'en-US') {
  return new Intl.DateTimeFormat(locale, {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  }).format(new Date(date));
}

/**
 * Utility function to debounce function calls
 */
function debounce(func, wait) {
  let timeout;
  return function executedFunction(...args) {
    const later = () => {
      clearTimeout(timeout);
      func(...args);
    };
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  };
}

/**
 * Utility function to throttle function calls
 */
function throttle(func, limit) {
  let inThrottle;
  return function(...args) {
    if (!inThrottle) {
      func.apply(this, args);
      inThrottle = true;
      setTimeout(() => inThrottle = false, limit);
    }
  };
}

/**
 * Check if user prefers reduced motion
 */
function prefersReducedMotion() {
  return window.matchMedia('(prefers-reduced-motion: reduce)').matches;
}

/**
 * Save user progress to localStorage
 */
function saveProgress(module, data) {
  const progressKey = `suraksha-progress-${module}`;
  const existingProgress = JSON.parse(localStorage.getItem(progressKey) || '{}');
  
  const updatedProgress = {
    ...existingProgress,
    ...data,
    lastUpdated: new Date().toISOString()
  };
  
  localStorage.setItem(progressKey, JSON.stringify(updatedProgress));
  
  console.log(`üíæ Progress saved for ${module}:`, updatedProgress);
}

/**
 * Load user progress from localStorage
 */
function loadProgress(module) {
  const progressKey = `suraksha-progress-${module}`;
  const progress = JSON.parse(localStorage.getItem(progressKey) || '{}');
  
  console.log(`üìÇ Progress loaded for ${module}:`, progress);
  return progress;
}

/**
 * Export data as CSV
 */
function exportToCSV(data, filename = 'data.csv') {
  const csvContent = data.map(row => 
    Object.values(row).map(val => 
      typeof val === 'string' && val.includes(',') ? `"${val}"` : val
    ).join(',')
  ).join('\n');
  
  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
  const link = document.createElement('a');
  
  if (link.download !== undefined) {
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);
    link.setAttribute('download', filename);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  }
}

// Initialize when DOM is loaded
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', init);
} else {
  init();
}

// Export for use by other modules
window.SurakshaLearn = SurakshaLearn;
window.saveProgress = saveProgress;
window.loadProgress = loadProgress;
window.exportToCSV = exportToCSV;
window.formatTime = formatTime;
window.formatDate = formatDate;
window.announceToScreenReader = announceToScreenReader;